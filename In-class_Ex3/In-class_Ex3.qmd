---
title: "In-class exercise 3"
author: "Yang Jingyuan"
format: html
editor: visual
---

## Spatially Constrained Clustering: ClustGeo Method

In this section, you will gain hands-on experience on using functions provided by **ClustGeo** package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

### Ward-like hierarchical clustering: ClustGeo

ClustGeo package provides function called `hclustgeo()` to perform a typical Ward-like hierarchical clustering just like `hclust()` you learned in previous section.

To perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.

``` r
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

![](https://r4gdsa.netlify.app/chap05_files/figure-html/unnamed-chunk-57-1.png)

Note that the dissimilarity matrix must be an object of class `dist`, i.e.Â an object obtained with the function `dist()`. For sample code chunk, please refer to [5.7.6 Computing proximity matrix](https://r4gdsa.netlify.app/chap05.html#computing-proximity-matrix)

#### Mapping the clusters formed

Similarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in Mapping the clusters formed.

``` r
groups <- as.factor(cutree(nongeo_cluster, k=6))
```

``` r
shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

``` r
qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

![](https://r4gdsa.netlify.app/chap05_files/figure-html/unnamed-chunk-60-1.png)

### Spatially Constrained Hierarchical Clustering

Before we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using [`st_distance()`](https://r-spatial.github.io/sf/reference/geos_measures.html) of sf package.

``` r
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

Notice that `as.dist()` is used to convert the data frame into matrix.

Next, `choicealpha()` will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.

``` r
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

![](https://r4gdsa.netlify.app/chap05_files/figure-html/unnamed-chunk-62-1.png)

![](https://r4gdsa.netlify.app/chap05_files/figure-html/unnamed-chunk-62-2.png)

With reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.

``` r
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
```

Next, `cutree()` is used to derive the cluster objecct.

``` r
groups <- as.factor(cutree(clustG, k=6))
```

We will then join back the group list with shan_sf polygon feature data frame by using the code chun below.

``` r
shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

We can not plot the map of the newly delineated spatially constrained clusters.

``` r
qtm(shan_sf_Gcluster, "CLUSTER")
```

![](https://r4gdsa.netlify.app/chap05_files/figure-html/unnamed-chunk-66-1.png)
