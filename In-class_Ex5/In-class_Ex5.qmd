---
title: "In-class exercise 5"
author: "Yang Jingyuan"
editor: visual
---

Dec 17, 2022

# Setting the scene

-   To build an explanatory model to discover factor affecting water point status in Osun State,Nigeria

-   Study area:Orun State, Negeria

-   Data sets:

-   Osun.rds, contains LGAs boundaries of Osun State. It is in sf polygon data frame, and

-   Osun_wp_sf.rds, contained water points within Osun State. It is in sf point data frame.

# Model Variables

-   Dependent variable: Water point status (i.e, functional/non-functional)

-   Independent variables:

    -   continuous

        -   distance_to_primary_road,

        -   distance_to_secondary_road,

        -   distance_to_tertiary_road,

        -   distance_to_city,

        -   distance_to_town,

        -   water point_population,

        -   local_population_1km,

    -   catrgorical

        -   usage_capacity,

        -   is_urban,

        -   water_source_clean

# Getting Start

-   Create In-class Exercise 5 folder

-   Loading packages

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling, rgdal, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, GGally, blorr, corrplot, skimr, caret, GWmodel, report)
```

## Data Import

In this in-class exercise, two data sets will be used. They are:

-   Osun.rds, contains LGAs boundaries of Osun State. It is in sf polygon data frame, and

-   Osun_wp_sf.rds, contained water points within Osun State. It is in sf point data frame.

### Importing the Analytical Data

```{r}
Osun <- read_rds("rds/Osun.rds")
Osun_wp_sf <- read_rds("rds/Osun_wp_sf.rds")
```

```{r}
head(Osun)
head(Osun_wp_sf)
```

-   Things to change `status` to binary variable.

![](images/9fef2d7dc607027958d10c949e96c67.jpg)

```{r}
Osun_wp_sf %>%
  freq(input = "status")
```

Here we know the number functional data is 2642 and non-functional data is 2118.

```{r}
tmap_mode("view")
tm_shape(Osun) +
#  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4)
tm_shape(Osun_wp_sf) +
  tm_dots(col = "status",
          alpha = 0.6) +
  tm_view(set.zoom.limits = c(9, 12))
```

# Exploratory Data Analysis

Summary Statistics with skimr

```{r}
Osun_wp_sf %>%
  skim()
```

-   water point_population, --- 4 missing values

-   local_population_1km, --- 4 missing values

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at(vars(status,
                 # distance_to_primary_road,
                 # distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

# Correlation Analysis

```{r}
Osun_wp <- Osun_wp_sf_clean %>%
  select(c(7,35:39,42:43,46:47,57)) %>%
  st_set_geometry(NULL)
```

```{r}
cluster_vars.cor = cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

# Building a Logistic Regression Models

```{r}
model <- glm(status ~ 
               # distance_to_primary_road +
               # distance_to_secondary_road +
               distance_to_tertiary_road +
               distance_to_city +
               distance_to_town +
               is_urban +
               usage_capacity +
               water_source_clean +
               water_point_population +
               local_population_1km,
             data = Osun_wp_sf_clean,
             family = binomial(link = 'logit'))
```

Instead of using typical R report, `blr_regress()` of `blorr` package is used.

```{r}
blr_regress(model)
```

## Interpretation of Logistic Regression

-   For categorical variables, a positive value implies an above average correlation and a negative value implies a below average correlation.

-   For continuous variables, a positive value implies a direct correlated on and a negative value implies an inverse correlation, while the magnitude of the value gives the strength of the correlation.

```{r}
# report(model)
```

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

# Building Geographically Weight

## Converting from sf to sp data

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
  select(c(status,
           # distance_to_primary_road,
           # distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           is_urban,
           usage_capacity,
           water_source_clean,
           water_point_population,
           local_population_1km)) %>%
  as_Spatial()
Osun_wp_sp
```

## Building Found Bandwidth GWR

```{r}
bw.fixed <- bw.ggwr(status ~ 
                     # distance_to_primary_road +
                     # distance_to_secondary_road +
                     distance_to_tertiary_road +
                     distance_to_city +
                     distance_to_town +
                     is_urban +
                     usage_capacity +
                     water_source_clean +
                     water_point_population +
                     local_population_1km,
                   data = Osun_wp_sp,
                   family = "binomial",
                   approach = "AIC",
                   kernel = "gaussian",
                   adaptive = FALSE,
                   longlat = FALSE)
```

```{r}
bw.fixed
```

```{r}
gwlr.fixed <- ggwr.basic(status ~ 
                     # distance_to_primary_road +
                     # distance_to_secondary_road +
                     distance_to_tertiary_road +
                     distance_to_city +
                     distance_to_town +
                     is_urban +
                     usage_capacity +
                     water_source_clean +
                     water_point_population +
                     local_population_1km,
                   data = Osun_wp_sp,
                   # bw = 2599.672,
                   bw = bw.fixed,
                   family = "binomial",
                   kernel = "gaussian",
                   adaptive = FALSE,
                   longlat = FALSE)
```

## Modeling Assessment

### Converting SDF into sf data.frame

To assess the performance of the gwLR, firstly, we will convert the SDF object in as data frame by using the code chunk below.

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

Next, we will label yhat values greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called most.

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate(most = ifelse(
    gwr.fixed$yhat >= 0.5, T, F))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)
CM
```

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>% 
  select(c(ADM2_EN, ADM2_PCODE,
           ADM1_EN, ADM1_PCODE,
           status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected, gwr.fixed)
```

```{r}
tmap_mode("view")
prob_T <- tm_shape(Osun) +
#  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf.fixed) +
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8, 14))
prob_T
```
